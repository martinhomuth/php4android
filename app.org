#+TITLE: PSP4Android
#+AUTHOR: Martin Homuth
#+DATE: <2016-12-18 Sun>

* DONE Problem Description
  CLOSED: [2016-12-22 Thu 17:09]
  :PROPERTIES:
  :Effort:   20
  :END:
  :LOGBOOK:
  - State "DONE"       from "STARTED"    [2016-12-22 Thu 17:09]
  CLOCK: [2016-12-22 Thu 16:50]--[2016-12-22 Thu 17:09] =>  0:19
  :END:

  The book 'A Discipline for Software Development' suggests a
  development process called 'personal software process' which
  structures the development of software in different phases. It does
  so by using tables to be filled out with specific information, such
  as time logging and defect recording. Handling these tables can be
  quite cumbersome and thus this project aims to provide an
  Android application which removes the need to write information to
  any other location. One of the problems of PSP is to know what
  exactly is part of the current process step and how to process from
  a specific step. Normally it is required to have a look into the
  process script file and also remember where to put the information.

* STARTED Planning
  :PROPERTIES:
  :Effort:   2:00
  :END:
  :LOGBOOK:
  CLOCK: [2016-12-30 Fri 19:14]--[2016-12-30 Fri 19:56] =>  0:42
  CLOCK: [2016-12-29 Thu 20:50]--[2016-12-29 Thu 20:53] =>  0:03
  CLOCK: [2016-12-29 Thu 20:39]--[2016-12-29 Thu 20:50] =>  0:11
  :END:

  The following data shall be inserted into the app:
  - state of current phase
  - time log in/out button
  - phase complete button -> automatic transition
  - phases
    - problem description
    - planning phase
      - requirements statement -> e.g. list?
      - collect time estimates in interactive question
	- planning, design, code, compile, test, postmortem for time in
          phase, defects injected and defects removed
    - design phase
      * text input for notes of the design
    - code phase
      - text input field for notes and such
      - (git source code browser access)
    - compile phase
    - test phase
    - postmortem phase (automatically filled, only for adjustments if necessary)
  - large button for defect injected
    - note time
    - automatically provide defect number
    - prompt for defect type
  - large button for defect removed
    - note time
    - prompt for defect number
    - prompt for fix time

  Transition from phase to phase
  - manual reselection of phase should be possible

  Input:
  - [optional] ProjectPlanSummary
  - project name
  - program
  - language
  - planning phase:
    - text - by user in app or externally provided
    - time estimates in minutes (1 to 9999)
  - design phase:
    - text - by user in app or externally provided
  - code phase:
    - text - by user in app or externally provided
  - compile phase:
    - text (notes)
  - test phase:
    - text (notes)
  - postmortem phase
    * time adjustments in minutes (1 to 9999)
  - defect injected
    - defect type (selection box)
      #+BEGIN_EXAMPLE
        Defect Types:
           10 Documentation   60 Checking
           20 Syntax          70 Data
           30 Build, Package  80 Function
           40 Assignment      90 System
           50 Interface      100 Environment
      #+END_EXAMPLE
    - text
  - defect removed
    - fix time in minutes (1 to 9999)

  Output:
  - DefectRecordingLog
  - TimeRecordingLog
  - ProjectPlanSummary

  All information above is stored in datatypes and exported to org
  files via an exporter.  No external hard- or software is required so
  far.  In the first version no external communication interfaces are
  necessary. The nonfunctional quality requirements are discarded for
  this project and considered in version 0.2

** Program Requirements
*** Prerequisites
    Most important: Risk reduction!
**** Clear statement of the problem to solve
       - described in the users point of view
**** Requirements Checklist
***** Specific Functional Requirements [7/7]
      - [X] inputs
	- source
	- accuracy
	- range of values
	- frequency
      - [X] outputs
	- destination
	- accuracy
	- range of values
	- frequency
      - [X] output formats
      - [X] external hard-/software
      - [X] external communication interfaces
	- handshaking
	- error-checking
	- communication protocols
      - [X] tasks the user wants to perform
      - [X] data
	- used in each task
	- resulting from each task
***** Specific Nonfunctional (Quality) Requirements [7/7]
      - [X] response time
	- from user's point of view
	- specified for all necessary operations
      - [X] timing considerations
	- processing time
	- data transfer rate
	- system throughput
      - [X] level of security
      - [X] reliability
	- consequences of software failure
	- vital information to prevent failure
	- strategy for error detection and recovery
      - [X] minimum machine memory/disk space
      - [X] maintainability
	- ability to adapt to changes in specific functionalities
	- changes in operating environment
	- changes in interfaces with other software
      - [X] definition of success/failure
***** Requirements Quality [0/8]
      - [ ] written in users language?
      - [ ] each requirement avoid conflicts with other requirements?
      - [ ] acceptable tradeoffs between competing attributes
        specified?
	- e.g. robustness vs. correctness
      - [ ] requirements avoid specifying the design?
      - [ ] consistent level of requirement detail?
	- any requirement needs more/less detail?
      - [ ] requirements clear enough to be handed to an independent group
      - [ ] each item relevant to the problem/solution?
	- can be traced to origin in problem environment
      - [ ] each requirement testable?
	- possible for independent testing to determine whether
          requirement has been satisfied?
      - [ ] all possible changes to requirements specified including
        likelihood of each change?
***** Requirements Completeness [0/3]
      - [ ] areas of incoompleteness specified if information is not
        available?
      - [ ] requirements complete wrt. acceptable product if satisfied?
      - [ ] comfortable with all requirements? impossibilities eliminated?
**** Architecture Checklist
***** Specific Architectural Topics [0/9]
      - [ ] overall organization clear?
	- including good architectural overview and justification
      - [ ] major building blocks well defined?
	- areas of responsibility
	- interfaces to other building blocks
      - [ ] requirements functions covered by enough building blocks?
      - [ ] most critical classes described and justified?
      - [ ] data design described and justified?
      - [ ] database organization and content specified?
      - [ ] all key business rules identified and impact described?
      - [ ] strategy for user interface design described?
      - [ ] user interface modularized?
      - [ ] strategy for I/O handling described and justified?
      - [ ] resource use estimates and resource management described
        and justified?
      - [ ] architecture's security requirements specified?
      - [ ] space and speed budgets for each
        class/subsystem/functionality area?
      - [ ] description how scalability is achieved?
      - [ ] strategy for internationalization/localization?
      - [ ] coherent error-handling strategy provided?
      - [ ] fault tolerance if needed described?
      - [ ] technical feasibility of all system parts established?
      - [ ] necessary buy-vs-build decisions included?
***** General Architectural Quality [/]
      - [ ] architecture accounts for all requirements?
      - [ ] any part over-/underachieved?
      - [ ] whole architecture hangs conceptually together?
      - [ ] top-level design independent of machine and languages?
      - [ ] motivations for all major decisions provided?




** Estimate Resources


* TODO Development [0/4]
** TODO Design
** TODO Code
** TODO Compile
** TODO Test
* TODO Postmortem
** Defects Injected
** Defects Removed
** Time
